'#Region "Copyright"
''Copyright © The Lake Companies, Inc. 2004 - 2012 - All Rights Reserved
''
''Use, duplication, or disclosure by the Government is subject to restrictions
''as set forth in subparagraph (c)(1)(ii) of the Rights in Technical Data and
''Computer Software clause at DFARS 252.227-7013, and Rights in Data-General at
''FAR 52.227.14, as applicable.
''
''Name of Contractor: The Lake Companies, Inc., 2980 Walker Dr, Green Bay,
''WI 54311 USA
''
''Unless customer maintains a license to source code, customer shall not:
''(i) copy, modify or otherwise update the code contained within this file or
''(ii) merge such code with other computer programs.
''
''Provided customer maintains a license to source code, then customer may modify
''or otherwise update the code contained within this file or merge such code with
''other computer programs subject to the following: (i) customer shall maintain
''the source code as the trade secret and confidential information of The Lake
''Companies, Inc., (LakeCo); (ii) the source code may only be used for so long as 
''customer maintains a license to source code pursuant to a separately executed 
''license agreement, and only for the purpose of developing and supporting 
''customer specific modifications to the source code, and not for the purpose of
''substituting or replacing software support provided by LakeCo; (iii) LakeCo
''will have no responsibility to provide software support for any customer
''specific modifications developed by or for the customer, including those
''developed by LakeCo, unless otherwise agreed to by LakeCo on a time and
''materials basis pursuant to a separately executed services agreement;
''(iv) LakeCo exclusively retains ownership to all intellectual property rights
''associated with the source code, and any derivative works thereof;
''(v) upon any expiration or termination of the license agreement, or upon
''customer's termination of software support, customer's license to the source
''code will immediately terminate and customer shall return the source code to
''LakeCo or prepare and send to LakeCo a written affidavit certifying destruction
''of the source code within ten (10) days following the expiration or termination
''of customer's license right to the source code; (vi) customer shall and shall 
''obligate all employees of customer or subcontractors of customer that have
''access to the source code to maintain the source code as the trade secret
''and confidential information of LakeCo and to protect the source code from 
''disclosure to any third parties, including employees of customer or 
''subcontractors of customer that are not under an obligation to maintain 
''the confidentiality of the source code; (vii) LakeCo may immediately terminate
''a source code license in the event that LakeCo becomes aware of a breach 
''of these provisions or if, in the commercially reasonable discretion of LakeCo, 
''a breach is probable; (viii) any breach by customer of its confidentiality 
''obligations hereunder may cause irreparable damage for which LakeCo may
''have no adequate remedy at law, and that LakeCo may exercise all available
''equitable remedies, including seeking injunctive relief, without having to post
''a bond; and, (ix) if Customer becomes aware of a breach or if a breach is 
''probable, customer will promptly notify LakeCo, and will provide assistance
''and cooperation as is necessary to remedy a breach that has already 
''occurred or to prevent a threatened breach.
''
''All other product or brand names used in this code may be trademarks,
''registered trademarks, or trade names of their respective owners.*/
''
'#End Region
''------------------------------------------------------------------------------
'' <auto-generated>
''     This code was generated by a tool.
''     Runtime Version:2.0.50727.3053
''
''     Changes to this file may cause incorrect behavior and will be lost if
''     the code is regenerated.
'' </auto-generated>
''------------------------------------------------------------------------------

'Option Strict On
'Option Explicit On

'Imports System
'Imports System.Runtime.Serialization

'Namespace DTFileServerService

'    '<System.Diagnostics.DebuggerStepThroughAttribute(),
'    ' System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"),
'    ' System.Runtime.Serialization.DataContractAttribute(Name:="VirtualRule", [Namespace]:="http://schemas.datacontract.org/2004/07/DTFileServerService"),
'    ' System.SerializableAttribute()>
'    'Partial Public Class VirtualRule
'    '    Inherits Object
'    '    Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged

'    '    <System.NonSerializedAttribute()>
'    '    Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject

'    '    <System.Runtime.Serialization.OptionalFieldAttribute()>
'    '    Private DirectoryField As String

'    '    <System.Runtime.Serialization.OptionalFieldAttribute()>
'    '    Private RecursiveField As Boolean

'    '    <System.Runtime.Serialization.OptionalFieldAttribute()>
'    '    Private RuleField As String

'    '    <System.Runtime.Serialization.OptionalFieldAttribute()>
'    '    Private SequenceField As Integer

'    '    <Global.System.ComponentModel.BrowsableAttribute(False)>
'    '    Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
'    '        Get
'    '            Return Me.extensionDataField
'    '        End Get
'    '        Set(ByVal value As System.Runtime.Serialization.ExtensionDataObject)
'    '            Me.extensionDataField = value
'    '        End Set
'    '    End Property

'    '    <System.Runtime.Serialization.DataMemberAttribute()>
'    '    Public Property Directory() As String
'    '        Get
'    '            Return Me.DirectoryField
'    '        End Get
'    '        Set(ByVal value As String)
'    '            If (Object.ReferenceEquals(Me.DirectoryField, value) <> True) Then
'    '                Me.DirectoryField = value
'    '                Me.RaisePropertyChanged("Directory")
'    '            End If
'    '        End Set
'    '    End Property

'    '    <System.Runtime.Serialization.DataMemberAttribute()>
'    '    Public Property Recursive() As Boolean
'    '        Get
'    '            Return Me.RecursiveField
'    '        End Get
'    '        Set(ByVal value As Boolean)
'    '            If (Me.RecursiveField.Equals(value) <> True) Then
'    '                Me.RecursiveField = value
'    '                Me.RaisePropertyChanged("Recursive")
'    '            End If
'    '        End Set
'    '    End Property

'    '    <System.Runtime.Serialization.DataMemberAttribute()>
'    '    Public Property Rule() As String
'    '        Get
'    '            Return Me.RuleField
'    '        End Get
'    '        Set(ByVal value As String)
'    '            If (Object.ReferenceEquals(Me.RuleField, value) <> True) Then
'    '                Me.RuleField = value
'    '                Me.RaisePropertyChanged("Rule")
'    '            End If
'    '        End Set
'    '    End Property

'    '    <System.Runtime.Serialization.DataMemberAttribute()>
'    '    Public Property Sequence() As Integer
'    '        Get
'    '            Return Me.SequenceField
'    '        End Get
'    '        Set(ByVal value As Integer)
'    '            If (Me.SequenceField.Equals(value) <> True) Then
'    '                Me.SequenceField = value
'    '                Me.RaisePropertyChanged("Sequence")
'    '            End If
'    '        End Set
'    '    End Property

'    '    Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

'    '    Protected Sub RaisePropertyChanged(ByVal propertyName As String)
'    '        Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
'    '        If (Not (propertyChanged) Is Nothing) Then
'    '            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
'    '        End If
'    '    End Sub
'    'End Class

'    '<System.Diagnostics.DebuggerStepThroughAttribute(),
'    ' System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0"),
'    ' System.Runtime.Serialization.DataContractAttribute(Name:="VirtualRuleResult", [Namespace]:="http://schemas.datacontract.org/2004/07/DTFileServerService"),
'    ' System.SerializableAttribute()>
'    'Partial Public Class VirtualRuleResult
'    '    Inherits Object
'    '    Implements System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged

'    '    <System.NonSerializedAttribute()>
'    '    Private extensionDataField As System.Runtime.Serialization.ExtensionDataObject

'    '    <System.Runtime.Serialization.OptionalFieldAttribute()>
'    '    Private FilesField() As String

'    '    <System.Runtime.Serialization.OptionalFieldAttribute()>
'    '    Private SequenceField As Integer

'    '    <Global.System.ComponentModel.BrowsableAttribute(False)>
'    '    Public Property ExtensionData() As System.Runtime.Serialization.ExtensionDataObject Implements System.Runtime.Serialization.IExtensibleDataObject.ExtensionData
'    '        Get
'    '            Return Me.extensionDataField
'    '        End Get
'    '        Set(ByVal value As System.Runtime.Serialization.ExtensionDataObject)
'    '            Me.extensionDataField = value
'    '        End Set
'    '    End Property

'    '    <System.Runtime.Serialization.DataMemberAttribute()>
'    '    Public Property Files() As String()
'    '        Get
'    '            Return Me.FilesField
'    '        End Get
'    '        Set(ByVal value As String())
'    '            If (Object.ReferenceEquals(Me.FilesField, value) <> True) Then
'    '                Me.FilesField = value
'    '                Me.RaisePropertyChanged("Files")
'    '            End If
'    '        End Set
'    '    End Property

'    '    <System.Runtime.Serialization.DataMemberAttribute()>
'    '    Public Property Sequence() As Integer
'    '        Get
'    '            Return Me.SequenceField
'    '        End Get
'    '        Set(ByVal value As Integer)
'    '            If (Me.SequenceField.Equals(value) <> True) Then
'    '                Me.SequenceField = value
'    '                Me.RaisePropertyChanged("Sequence")
'    '            End If
'    '        End Set
'    '    End Property

'    '    Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

'    '    Protected Sub RaisePropertyChanged(ByVal propertyName As String)
'    '        Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
'    '        If (Not (propertyChanged) Is Nothing) Then
'    '            propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
'    '        End If
'    '    End Sub
'    'End Class

'    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0"),
'     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="DTFileServerService.IService")>
'    Public Interface IService

'        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService/GetLaborUtilization", ReplyAction:="http://tempuri.org/IService/GetLaborUtilizationResponse")>
'        Function GetLaborUtilization(ByVal user As String) As List(Of LaborUtilization)

'        '<System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService/RunVirtualRules", ReplyAction:="http://tempuri.org/IService/RunVirtualRulesResponse")>
'        'Function RunVirtualRules(ByVal VirtualRules() As DTFileServerService.VirtualRule) As DTFileServerService.VirtualRuleResult()

'        '<System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService/ScanFileExists", ReplyAction:="http://tempuri.org/IService/ScanFileExistsResponse")>
'        'Function ScanFileExists(ByVal InFileName As String) As Boolean
'    End Interface

'    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>
'    Public Interface IServiceChannel
'        Inherits DTFileServerService.IService, System.ServiceModel.IClientChannel
'    End Interface

'    <System.Diagnostics.DebuggerStepThroughAttribute(),
'     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")>
'    Partial Public Class ServiceClient
'        Inherits System.ServiceModel.ClientBase(Of DTFileServerService.IService)
'        Implements DTFileServerService.IService

'        Public Sub New()
'            MyBase.New()
'        End Sub

'        Public Sub New(ByVal endpointConfigurationName As String)
'            MyBase.New(endpointConfigurationName)
'        End Sub

'        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
'            MyBase.New(endpointConfigurationName, remoteAddress)
'        End Sub

'        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
'            MyBase.New(endpointConfigurationName, remoteAddress)
'        End Sub

'        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
'            MyBase.New(binding, remoteAddress)
'        End Sub

'        Public Function GetLaborUtilization(ByVal user As String) As List(Of LaborUtilization) Implements DTFileServerService.IService.GetLaborUtilization
'            Return MyBase.Channel.GetLaborUtilization(user)
'        End Function


'    End Class
'    Public Class LaborUtilization
'        Private _Date As String
'        Public Property [Date]() As String
'            Get
'                Return _Date
'            End Get
'            Set(ByVal value As String)
'                _Date = value
'            End Set
'        End Property
'        Private _DirectHours As Decimal?
'        Public Property DirectHours() As Decimal?
'            Get
'                Return _DirectHours
'            End Get
'            Set(ByVal value As Decimal?)
'                _DirectHours = value
'            End Set
'        End Property
'        Private _IndirectHours As Decimal?
'        Public Property IndirectHours() As Decimal?
'            Get
'                Return _IndirectHours
'            End Get
'            Set(ByVal value As Decimal?)
'                _IndirectHours = value
'            End Set
'        End Property
'        Private _Utilization As Decimal?
'        Public Property Utilization() As Decimal?
'            Get
'                Return _Utilization
'            End Get
'            Set(ByVal value As Decimal?)
'                _Utilization = value
'            End Set
'        End Property
'    End Class

'End Namespace


'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Runtime.Serialization

Namespace ServiceReference1

    Public Class LaborUtilization
        Private _Date As String
        Public Property [Date]() As String
            Get
                Return _Date
            End Get
            Set(ByVal value As String)
                _Date = value
            End Set
        End Property
        Private _DirectHours As Decimal?
        Public Property DirectHours() As Decimal?
            Get
                Return _DirectHours
            End Get
            Set(ByVal value As Decimal?)
                _DirectHours = value
            End Set
        End Property
        Private _IndirectHours As Decimal?
        Public Property IndirectHours() As Decimal?
            Get
                Return _IndirectHours
            End Get
            Set(ByVal value As Decimal?)
                _IndirectHours = value
            End Set
        End Property
        Private _Utilization As Decimal?
        Public Property Utilization() As Decimal?
            Get
                Return _Utilization
            End Get
            Set(ByVal value As Decimal?)
                _Utilization = value
            End Set
        End Property
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),
     System.ServiceModel.ServiceContractAttribute(ConfigurationName:="ServiceReference1.IService1")>
    Public Interface IService1

        <System.ServiceModel.OperationContractAttribute(Action:="http://tempuri.org/IService1/GetLaborUtilization", ReplyAction:="http://tempuri.org/IService1/GetLaborUtilizationResponse")>
        Function GetLaborUtilization(ByVal user As String) As ServiceReference1.LaborUtilization()
    End Interface

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>
    Public Interface IService1Channel
        Inherits ServiceReference1.IService1, System.ServiceModel.IClientChannel
    End Interface

    <System.Diagnostics.DebuggerStepThroughAttribute(),
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>
    Partial Public Class Service1Client
        Inherits System.ServiceModel.ClientBase(Of ServiceReference1.IService1)
        Implements ServiceReference1.IService1

        Public Sub New()
            MyBase.New
        End Sub

        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub

        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub

        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub

        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub

        Public Function GetLaborUtilization(ByVal user As String) As ServiceReference1.LaborUtilization() Implements ServiceReference1.IService1.GetLaborUtilization
            Return MyBase.Channel.GetLaborUtilization(user)
        End Function
    End Class
End Namespace
